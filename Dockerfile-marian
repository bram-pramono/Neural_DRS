FROM python:slim-buster AS base-neural-drs

RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get install -y --no-install-recommends git \
 && apt-get install -y wget \
 && apt-get install -y unzip

RUN pip install --upgrade pip

## Create data folder, download files and unzip
## Get the data
WORKDIR /app/data

COPY data/tok .

RUN wget "https://pmb.let.rug.nl/releases/exp_data_2.2.0.zip"
RUN wget "https://pmb.let.rug.nl/releases/exp_data_3.0.0.zip"

### Unzip and rename
RUN unzip exp_data_2.2.0.zip
RUN unzip exp_data_3.0.0.zip
RUN mv exp_data_2.2.0 2.2.0
RUN mv pmb_exp_data_3.0.0 3.0.0
## Clean up zips
RUN rm exp_data_2.2.0.zip
RUN rm exp_data_3.0.0.zip

WORKDIR /app

COPY ./src ./src
COPY ./config ./config
COPY ./vocabs ./vocabs
COPY ./output ./output

# Get the DRS parsing repo with the scripts (Counter) and data
RUN git clone https://github.com/RikVN/DRS_parsing
RUN cd DRS_parsing \
 && git checkout v.3.0.0 \
 && pip install 'numpy==1.24.3' 'psutil>=5.6.6' 'PyYAML==6.0.1' \
 && pip install scipy matplotlib

RUN src/setup_training_data.sh

ENV PYTHONPATH=DRS_parsing/:DRS_parsing/evaluation/:$PYTHONPATH

ENTRYPOINT ["/bin/bash"]

FROM base-neural-drs AS marian-build

RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get install -y --no-install-recommends git \
 && apt-get install -y cmake \
 && apt-get install -y wget \
 && apt-get install -y unzip \
 && apt-get install -y openjdk-11-jre-headless \
 && apt-get install -y ant \
 && apt-get install -y gcc clang clang-tools build-essential libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev libboost-filesystem-dev \
 && apt-get clean;

# Fix certificate issues
RUN apt-get update \
 && apt-get install ca-certificates-java \
 && apt-get clean \
 && update-ca-certificates -f;

# Setup JAVA_HOME -- useful for docker commandline
ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64
RUN export JAVA_HOME

# Download easyccg and model (use PMB forked version)
RUN git clone https://github.com/ParallelMeaningBank/easyccg
RUN cd easyccg \
    && ant  \
    && wget "http://www.let.rug.nl/rikvannoord/easyCCG/model.tar.gz" \
    && tar xvzf model.tar.gz

# Download and set up stanford CoreNLP
# Instructions from: https://stanfordnlp.github.io/CoreNLP/download.html
# Check if you have the correct java version installed
# java -version should complete successfully with a line like: java version "1.8.0_92".
RUN wget http://nlp.stanford.edu/software/stanford-corenlp-full-2018-10-05.zip
RUN unzip stanford-corenlp-full-2018-10-05.zip
#COPY tmp/stanford-corenlp-full-2018-10-05 stanford-corenlp-full-2018-10-05/

# Install intel repo key for CPU support
RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
RUN apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
RUN rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
RUN sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
RUN apt-get update && apt-get install -y intel-mkl-64bit-2020.0-088

# Install Marian: https://marian-nmt.github.io/docs/
RUN git clone https://github.com/marian-nmt/marian
RUN apt install -y doxygen libgoogle-perftools-dev graphviz

WORKDIR /app/marian/build
## For GPU based computation
#RUN cmake .. \
# For CPU based computation
RUN cmake .. -DCOMPILE_CUDA=off

# Define how many cores you want to make available by using the option -j#. E.g. -j8 for 8 cores.
RUN make -j8

RUN apt-get install -y curl

WORKDIR /app/models/marian
RUN curl -o best_gold_only.npz www.let.rug.nl/rikvannoord/DRS/IWCS/models/best_gold_only/model1.npz
RUN curl -o best_gold_silver.npz www.let.rug.nl/rikvannoord/DRS/IWCS/models/best_gold_silver/model1.npz
RUN curl -o baseline_gold_silver.npz www.let.rug.nl/rikvannoord/DRS/IWCS/models/baseline_gold_silver/model1.npz

WORKDIR /app

RUN mkdir -p /app/data/sent
RUN echo 'alias  ll="ls -la"' >> ~/.bashrc

COPY src/marian_scripts/parse_sent_file.sh ./marian_parse_sent_file.sh

ENTRYPOINT ["/bin/bash", "marian_parse_sent_file.sh"]
